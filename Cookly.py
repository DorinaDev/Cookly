import json

# Rezept-Bibliothek
rezepte = {
    "Shepherd's Pie": {
        "portionen": 4, # Standard Portionen
        "zubereitungszeit": "45 Min.",
        "verderblichkeit": "2", # Wert zwischen 1-3 (1 = Nur Konserven, 2 = Haltbares Gem√ºse, 3 = Leicht verderbliche Lebensmittel)
        "zutaten": {
            "Kartoffeln": (7, "Stk."),
            "Milch": (150, "ml"),
            "Butter": (30, "g"),
            "Pizzatomaten": (200, "g"),
            "Bohnen": (200, "g"),
            "Mais": (100, "g"),
            "Reibek√§se": (100,"g"),
            "Salz+Pfeffer": (1, "Prise"),
            "Muskat": (1, "Prise")
        },
        "zubereitung": {
            1: "Aus Kartoffeln, Milch, Butter, Salz+Pfeffer und Muskat Kartoffelbrei herstellen.",
            2: "Die Pizzatomaten, Bohnen und Mais in eine Auflaufform geben.",
            3: "Den Kartoffelbrei √ºber den Tomatenmix geben und mit K√§se bestreuen.",
            4: "Die Auflaufform in den Ofen stellen und bei 180 ¬∞C Umluft f√ºr etwa 15 Min. backen, bis der K√§se goldbraun ist."
        }
    }
}

wochenplan_list = [] 
finaler_wochenplan = {}
einkaufsliste_list = {}

# Speicherfunktion
def bib_speichern():
    daten = {"rezepte": rezepte, "finaler_wochenplan": finaler_wochenplan, "wochenplan": wochenplan_list, "einkaufsliste": einkaufsliste_list}

    try:
        with open("bib.json", "w", encoding="utf-8") as datei:
            json.dump(daten, datei, indent=4)

        print("Deine Rezeptbibliothek wurde gespeichert.")

    except Exception as e:
        print(f"Fehler beim Speichern: {e}.")

# Bib Laden
def bib_laden():
    global rezepte, finaler_wochenplan, wochenplan_list, einkaufsliste_list
    
    try:
        with open("bib.json", "r", encoding="utf-8") as datei:
            daten = json.load(datei)

        rezepte = daten.get("rezepte", {})
        wochenplan_list = daten.get("wochenplan", [])
        einkaufsliste_list = daten.get("einkaufsliste", {})
        finaler_wochenplan = daten.get("finaler_wochenplan", {})

        print("\nDeine Rezeptbibliothek wurde geladen.")

    except FileNotFoundError:
        print("\nKein gespeicherter Speicherstand gefunden.")
    except json.JSONDecodeError:
        print("Fehler: Die Datei ist besch√§digt oder ung√ºltig.")

# Rezept-Ausgabe
def rezept_anzeigen():
    while True: 
        wahl = input("Welches Rezept m√∂chtest du anzeigen lassen? \n> ").lower()
        while True:
            try:
                portionen = int(input("Wie viele Portionen m√∂chtest du kochen? \n> "))
                if portionen <= 0:
                    print("Bitte gib mindestens '1' ein.")
                else:
                    break
            except ValueError:
                print("Ung√ºltige Eingabe, bitte gib eine Zahl ein.")

        if wahl in rezepte:
            gew√§hltes_rezept = rezepte[wahl]

            # Mengenberechnung
            faktor = portionen / gew√§hltes_rezept["portionen"]
            
            print(f"\nüåü {wahl} üåü\n")
            print(f"Portionen: {portionen}")
            print(f"Zubereitungszeit: {gew√§hltes_rezept['zubereitungszeit']}\n")

            print("üìù Zutaten:")
            for zutat, (menge, einheit) in gew√§hltes_rezept["zutaten"].items():
                neue_menge = round(menge * faktor, 2)
                print(f"- {neue_menge} {einheit} {zutat}" if einheit else f" {neue_menge} {zutat}")
            
            print("\nüë®‚Äçüç≥ Zubereitung:")
            for schritt, text in gew√§hltes_rezept["zubereitung"].items():
                print(f"{schritt}. {text}")

            print("\nSoll das Rezept auf den Wochenplan? (ja/nein)")
            entscheidung = input("> ").strip().lower()
            if entscheidung == "ja":
                print(f"{wahl} wurde zum Wochenplan hinzugef√ºgt!")
                wochenplan_list.append(wahl)
            else:
                print("Okay, dann vielleicht sp√§ter!")
        else:
            print("Dieses Rezept befindet sich nicht in der Bibliothek. √úberpr√ºfe die Rechtschreibung.")

        print("M√∂chtest du ein weitere Rezept anzeigen lassen? (ja/nein)")
        while True:
            try:
                weiteres_rezept = input("> ").lower()
                if weiteres_rezept == "nein":
                    return
                if weiteres_rezept == "ja":
                    continue
                else:
                    print("Bitte gib 'ja' oder 'nein' ein.")
            except ValueError:
                print("Ung√ºltige Eingabe. Bitte gib 'ja' oder 'nein' ein.")

# Sortierung f√ºr den Wochenplan
def sort_wochenplan(auswahl):
    sortierung_verderblichkeit = sorted(auswahl, key=lambda gericht: rezepte[gericht]["verderblichkeit"], reverse=True)

    finale_liste = sortierung_verderblichkeit[:]

    i = 0
    while len(finale_liste) < 7 and i < len(sortierung_verderblichkeit) - 1:
        pos = finale_liste.index(sortierung_verderblichkeit[i])
        finale_liste.insert(pos + 1, sortierung_verderblichkeit[i])
        i += 1

    while len(finale_liste) < 7:
        finale_liste.append(sortierung_verderblichkeit[-1])

    return finale_liste

# Wochenplan
def wochenplan():
    global finaler_wochenplan

    tage = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"]
    auswahl = []

    if not wochenplan_list:
        print("Deine Wochenplan-Liste ist noch leer.")
        return
    
    print(f"Auf deiner Wochenplan-Liste befinden sich die folgenden Rezepte:")
    wochenplan_dict = {i + 1: rezept for i, rezept in enumerate(wochenplan_list)}

    for key, value in wochenplan_dict.items():
        print(f"{key}. {value}")
    
    while len(auswahl) < 7:
        print("W√§hle nun bis zu 7 Gerichte f√ºr deinen Wochenplan aus.")
        eingabe = input("Bitte gib die Nummer eines Gerichtes ein (oder 'fertig' wenn du genug Gerichte ausgew√§hlt hast)\n> ")
            
        if eingabe.lower() == "fertig":
            if len(auswahl) == 0:
                print("Du musst mindestens ein Gericht eingeben.")
                continue
            break
            
        try:
            nummer = int(eingabe)
            if nummer in wochenplan_dict:
                gericht = wochenplan_dict[nummer]
                if gericht in auswahl:
                    print("Dieses Gericht hast du schon ausgew√§hlt.")
                else:
                    auswahl.append(wochenplan_dict[nummer])
                    print(f"Du hast {wochenplan_dict[nummer]} erfolgreich hinzugef√ºgt.")
            else:
                print("Diese Nummer gibt es nicht.")
        except ValueError: 
            print("Bitte gib eine Zahl ein.")

    finale_liste = sort_wochenplan(auswahl)

    for i, tag in enumerate(tage):
        finaler_wochenplan[tag] = finale_liste[i]

    bib_speichern()

    print("\nüóìÔ∏è Dein optimierter Wochenplan:\n")
    for tag, gericht in finaler_wochenplan.items():
        print(f"{tag:<10}: {gericht}")

# Einkaufsliste (in Arbeit)
def einkaufsliste(finaler_wochenplan):
    global rezepte, einkaufsliste_list

    print("Hier kannst du eine Einkaufsliste f√ºr die geplanten Gerichte dieser Woche ausgeben lassen.")

    # Abfrage der Personenzahl
    print("Zuerst musst du entscheiden, wie viele Personen an welchen Tagen mitessen sollen.")
    print("Wie m√∂chtest du deinen Plan erstellen? W√§hle zwischen 1. und 2.")
    print("1. F√ºr die gesamte Woche bleibt die Personenzahl gleich.")
    print("2. Ich m√∂chte f√ºr jeden Tag eine andere Personenzahl angeben.")
    
    while True:
        try:
            wahl = input("> ")
            if wahl == "1":
                portionen_gesamt = int(input("Die Personenzahl f√ºr diese Woche lautet: "))
                # Faktorberechnung
                faktoren = {}
                for tag, gericht in finaler_wochenplan.items():
                    portionen_im_rezept = rezepte[gericht]["portionen"]
                    faktor = portionen_gesamt / portionen_im_rezept
                    faktoren[tag] = faktor

                # Zutatenmenge anhand der Portionenanzahl berechnen
                for tag, gericht in finaler_wochenplan.items():
                    rezept = rezepte[gericht]
                    faktor = faktoren[tag]

                    for zutat, (menge, einheit) in rezept["zutaten"].items():
                        angepasste_menge = round(menge * faktor, 1)

                        if zutat in einkaufsliste_list:
                            einkaufsliste_list[zutat][0] += angepasste_menge
                        else:
                            einkaufsliste_list[zutat] = [angepasste_menge, einheit]
                print("\nDeine Einkaufsliste f√ºr diese Woche:")
                for zutat, (menge, einheit) in einkaufsliste_list.items():
                    print(f"- {menge} {einheit} {zutat}")
                bib_speichern()
                break

            elif wahl == "2":
                portionen_unterschied = {}
                portionen_mo = int(input("Wie viele Personen essen am Montag mit? > "))
                portionen_unterschied["Montag"] = portionen_mo
                portionen_di = int(input("Wie viele Personen essen am Dienstag mit? > "))
                portionen_unterschied["Dienstag"] = portionen_di
                portionen_mi = int(input("Wie viele Personen essen am Mittwoch mit? > "))
                portionen_unterschied["Mittwoch"] = portionen_mi
                portionen_do = int(input("Wie viele Personen essen am Donnerstag mit? > "))
                portionen_unterschied["Donnerstag"] = portionen_do
                portionen_fr = int(input("Wie viele Personen essen am Freitag mit? > "))
                portionen_unterschied["Freitag"] = portionen_fr
                portionen_sa = int(input("Wie viele Personen essen am Samstag mit? > "))
                portionen_unterschied["Samstag"] = portionen_sa
                portionen_so = int(input("Wie viele Personen essen am Sonntag mit? > "))
                portionen_unterschied["Sonntag"] = portionen_so

                # Faktorberechnung
                faktoren = {}
                for tag, gericht in finaler_wochenplan.items():
                    portionen_im_rezept = rezepte[gericht]["portionen"]
                    faktor = portionen_unterschied[tag] / portionen_im_rezept
                    faktoren[tag] = faktor

                # Zutatenmenge anhand der Portionenanzahl berechnen
                for tag, gericht in finaler_wochenplan.items():
                    rezept = rezepte[gericht]
                    faktor = faktoren[tag]

                    for zutat, (menge, einheit) in rezept["zutaten"].items():
                        angepasste_menge = round(menge * faktor, 1)

                        if zutat in einkaufsliste_list:
                            einkaufsliste_list[zutat][0] += angepasste_menge
                        else:
                            einkaufsliste_list[zutat] = [angepasste_menge, einheit]
                print("\nDeine Einkaufsliste f√ºr diese Woche:")
                for zutat, (menge, einheit) in einkaufsliste_list.items():
                    print(f"- {menge} {einheit} {zutat}")
                bib_speichern()
                break
            else:
                print("Ung√ºltige Eingabe. Bitte entscheide dich zwischen 1. und 2.")
        except ValueError: 
            print("Ung√ºltige Eingabe. Bitte gib eine Zahl an.")

# Neues Rezept hinzuf√ºgen
def neues_rezept(rezepte):
    while True: 
        zubereitungs_dict = {}
        zutaten_dict = {}

        print("Welches Rezept m√∂chtest du hinzuf√ºgen?")
        name = input("Name: ")
        
        print("F√ºr wie viele Portionen ist das Rezept ausgelegt?")
        while True: 
            try:
                portionen = int(input("Portionen: "))
                if portionen > 0:
                    break
                else:
                    print("Bitte gib eine Zahl, gr√∂√üer als 0 ein.")
            except ValueError: 
                print("Ung√ºltige Eingabe. Bitte gib eine Zahl ein.")

        print("Wie lange dauert es das Rezept zuzubereiten?")
        zubereitungszeit = input("Zubereitungszeit: ")

        print("Wie verderblich sind die Zutaten f√ºr das Rezept?")
        print("Bitte gib an: 1 = Nur Konserven, 2 = Haltbares Gem√ºse, 3 = Leicht verderbliche Lebensmittel")
        print("Das hilft deiner App dabei, besser zu kalkukulieren, wenn du einen Wochenplan erstellen m√∂chtest.")
        verderblichkeit = input("Verderblichkeit: ")

        print("Nun kannst du die Zutaten hinzuf√ºgen.")
        while True: 
            zutat = input("Bitte gib eine Zutat ein (oder 'fertig', um abzuschlie√üen): ")
            if zutat.lower() == "fertig":
                break
            try:
                menge = float(input(f"Gib die Menge f√ºr {zutat} ein: "))
            except ValueError:
                print("Ung√ºltige Zahl, bitte erneut eingeben.")
                continue
            einheit = input(f"Gib die Einheit f√ºr {zutat} ein (z.B. g, ml, EL): ")
            zutaten_dict[zutat] = (menge, einheit)

        print("Nun kannst du die Verarbeitungsschritte eingeben.")
        nummer = 1
        while True: 
            schritt = input(f"Schritt {nummer} (oder 'fertig', um abzuschlie√üen): ")
            if schritt.lower() == "fertig":
                break
            zubereitungs_dict[nummer] = schritt
            nummer += 1

        rezepte[name.lower()] = {"portionen": portionen, "zubereitungszeit": zubereitungszeit, "verderblichkeit": verderblichkeit, "zutaten": zutaten_dict, "zubereitung": zubereitungs_dict}
        
        bib_speichern()

        while True:
            print("M√∂chtest du ein weiteres Rezept eingeben?")
            print("1. Ja.")
            print("2. Nein.")
            
            try:
                wahl_n√§chste = int(input("> "))
                if wahl_n√§chste == 1:
                    print("Beginnen wir mit deinem n√§chsten Rezept.")
                    break
                elif wahl_n√§chste == 2:
                    print("Du kehrst zur√ºck ins Hauptmenu.")
                    hauptmenu()
                    return rezepte
                else:
                    print("Bitte gib 1 oder 2 an.")
            except ValueError: 
                print("Ung√ºltige Eingabe. Bitte gib eine Zahl ein.")

# Wochenplan und Einkaufsliste PDF erstellen
from fpdf import FPDF
from datetime import datetime

def pdf_wochenplan():
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    datum = datetime.now().strftime("%d.%m.%Y")

    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, f"Wochenplan ab {datum}", ln=True)

    pdf.set_font("Arial", size=12)
    for tag, gericht in finaler_wochenplan.items():
        pdf.cell(0, 10, f"{tag}: {gericht}", ln=True)

    pdf.output("Wochenplan.pdf")
    print("PDF f√ºr den Wochenplan wurde erstellt.")

def pdf_einkaufsliste():
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    datum = datetime.now().strftime("%d.%m.%Y")

    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, f"Einkaufsliste ab {datum}", ln=True)

    pdf.set_font("Arial", size=12)
    for zutat, (menge, einheit) in einkaufsliste_list.items():
        pdf.cell(0, 10, f"{menge} {einheit} {zutat}", ln=True)

    pdf.output("einkaufsliste.pdf")
    print("PDF f√ºr die Einkaufsliste wurde erstellt.")

# Check: Schon wieder Montag?
def wochen_check():
    import os

    # Datei mit Datum bereits vorhanden?
    letzte_woche_datei = "letzte_woche.txt"
    heute = datetime.now()
    aktuelle_kw = heute.isocalender()[1]

    letzte_kw = None
    if os.path.exists(letzte_woche_datei):
        with open(letzte_woche_datei, "r") as f:
            letzte_kw = int(f.read().strip())
    if letzte_kw != aktuelle_kw:
        print(f"\nEine neue Woche ist gestartet! (KW {aktuelle_kw})")
        print("M√∂chtest du den alten Wochenplan und die Einkaufsliste als PDF speichern, bevor alles zur√ºckgesetzt wird? (ja/nein)")
        if input("> ").lower() == "ja":
            pdf_wochenplan()
            pdf_einkaufsliste()

        # Wochenplan und Einkaufsliste zur√ºcksetzen
        wochenplan_list.clear()
        finaler_wochenplan.clear()
        einkaufsliste_list.clear()

        bib_speichern()

        # Neues Datum wird gespeichert
        with open(letzte_woche_datei, "w") as f:
            f.write(str(aktuelle_kw))

# Hauptmen√º
def hauptmenu():
    while True:
        print("\nüåü Willkommen zu deiner Rezept-Bibliothek! üåü")
        print("\nWas m√∂chtest du gerne tun?")
        print("1Ô∏è‚É£ Ein Rezept anzeigen lassen")
        print("2Ô∏è‚É£ Ein neues Rezept hinzuf√ºgen")
        print("3Ô∏è‚É£ Meinen Wochenplan √∂ffnen")
        print("4Ô∏è‚É£ Meine Einkaufsliste √∂ffnen")
        print("5Ô∏è‚É£ Die App beenden")

        try:
            wahl = int(input("\nDeine Auswahl > "))

            if wahl == 1:
                rezept_anzeigen()
            elif wahl == 2:
                neues_rezept(rezepte)
            elif wahl == 3:
                wochenplan()
            elif wahl == 4:
                einkaufsliste(finaler_wochenplan)
            elif wahl == 5:
                print("\nüëã Du beendest die App. Bis zum n√§chsten Mal!")
                break
            else:
                print("\n‚ö† Ung√ºltige Eingabe. Bitte w√§hle eine Zahl zwischen 1 und 5.")

        except ValueError:
            print("\n‚ö† Fehler: Bitte gib eine g√ºltige Zahl ein.")

        input("\nüîÑ Dr√ºcke ENTER, um zur√ºck ins Hauptmen√º zu gelangen...")

# App starten
if __name__ == "__main__":
    wochen_check()
    bib_laden()
    hauptmenu()
